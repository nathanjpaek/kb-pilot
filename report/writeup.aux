\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\bibstyle{abbrvnat}
\citation{tilelang2025}
\citation{ouyang2025kernelbenchllmswriteefficient}
\citation{tilelang2025}
\@writefile{toc}{\contentsline {section}{\numberline {1}Background and Setup}{1}{section.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Problem Definition}{1}{subsection.1.1}\protected@file@percent }
\citation{sakana2024}
\citation{dspy2023}
\citation{dspy2023}
\citation{ouyang2025kernelbenchllmswriteefficient}
\@writefile{toc}{\contentsline {section}{\numberline {2}Approach}{2}{section.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Progressive Learning Framework}{2}{subsection.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}RAG-Enhanced Generation Process}{2}{subsection.2.2}\protected@file@percent }
\citation{dspy2023}
\citation{ouyang2025kernelbenchllmswriteefficient}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Performance Optimization}{3}{subsection.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Case Study: 29\_Matmul\_Mish\_Mish}{3}{subsection.2.4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {3}Evaluation and Results}{3}{section.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1}Definition of Success}{3}{subsection.3.1}\protected@file@percent }
\citation{ouyang2025kernelbenchllmswriteefficient}
\citation{sakana2024}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.2}Experimental Setup}{4}{subsection.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.3}Generation Success Rates}{4}{subsection.3.3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Success rates across levels for different generation approaches. TilePilot (RAG) shows significant improvements over both naive prompting and few-shot ICL, particularly on Level 2 tasks.}}{4}{figure.caption.2}\protected@file@percent }
\providecommand*\caption@xref[2]{\@setref\relax\@undefined{#1}}
\newlabel{fig:success_rates}{{1}{4}{Success rates across levels for different generation approaches. TilePilot (RAG) shows significant improvements over both naive prompting and few-shot ICL, particularly on Level 2 tasks}{figure.caption.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.4}Cost Efficiency Analysis}{5}{subsection.3.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.5}Performance Analysis}{5}{subsection.3.5}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Distributional Insights}{5}{section*.3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Distribution of speedup ratios (log scale) for generated kernels across all difficulty levels.}}{5}{figure.caption.4}\protected@file@percent }
\newlabel{fig:overall_speedup}{{2}{5}{Distribution of speedup ratios (log scale) for generated kernels across all difficulty levels}{figure.caption.4}{}}
\newlabel{fig:level1_speedup}{{3a}{5}{Distribution of speedup ratios for Level 1 kernels}{figure.caption.5}{}}
\newlabel{sub@fig:level1_speedup}{{a}{5}{Distribution of speedup ratios for Level 1 kernels}{figure.caption.5}{}}
\newlabel{fig:level2_speedup}{{3b}{5}{Distribution of speedup ratios for Level 2 kernels}{figure.caption.5}{}}
\newlabel{sub@fig:level2_speedup}{{b}{5}{Distribution of speedup ratios for Level 2 kernels}{figure.caption.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Performance distribution (log scale) across difficulty levels. The red vertical line in each plot indicates the mean speedup for that level, and the PyTorch Baseline is marked for reference.}}{5}{figure.caption.5}\protected@file@percent }
\newlabel{fig:speedup_distributions}{{3}{5}{Performance distribution (log scale) across difficulty levels. The red vertical line in each plot indicates the mean speedup for that level, and the PyTorch Baseline is marked for reference}{figure.caption.5}{}}
\citation{kernelsseum2024}
\citation{kernelsseum2024}
\@writefile{toc}{\contentsline {paragraph}{Quantitative Summary}{6}{section*.6}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {1}{\ignorespaces Performance analysis of generated kernels. ``Kernels $>$ 1.0x'' indicates the number and percentage of kernels that outperform PyTorch.}}{6}{table.caption.7}\protected@file@percent }
\newlabel{tab:performance}{{1}{6}{Performance analysis of generated kernels. ``Kernels $>$ 1.0x'' indicates the number and percentage of kernels that outperform PyTorch}{table.caption.7}{}}
\@writefile{toc}{\contentsline {paragraph}{Comparison to KernelBench Leaderboard}{6}{section*.8}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {2}{\ignorespaces Comparison between TilePilot (TileLang) and KernelBench leaderboard (CUDA) results.}}{6}{table.caption.9}\protected@file@percent }
\newlabel{tab:leaderboard_comparison}{{2}{6}{Comparison between TilePilot (TileLang) and KernelBench leaderboard (CUDA) results}{table.caption.9}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.6}Test Set Evaluation}{6}{subsection.3.6}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Test set success rates across generation methods. TilePilot achieves substantial improvements in zero-shot generalization compared to baseline approaches.}}{7}{figure.caption.10}\protected@file@percent }
\newlabel{fig:test_set_success}{{4}{7}{Test set success rates across generation methods. TilePilot achieves substantial improvements in zero-shot generalization compared to baseline approaches}{figure.caption.10}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Distribution of speedup ratios for test set kernels (log scale). The red vertical line indicates the mean speedup of 1.25x, showing that the majority of kernels achieve meaningful performance improvements over PyTorch baselines.}}{7}{figure.caption.11}\protected@file@percent }
\newlabel{fig:test_set_speedup}{{5}{7}{Distribution of speedup ratios for test set kernels (log scale). The red vertical line indicates the mean speedup of 1.25x, showing that the majority of kernels achieve meaningful performance improvements over PyTorch baselines}{figure.caption.11}{}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Analysis}{8}{section.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}Why RAG Succeeds}{8}{subsection.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Mathematical Optimization Discovery}{8}{subsection.4.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Performance Limitations Analysis}{8}{subsection.4.3}\protected@file@percent }
\citation{ethayarajh2024ktomodelalignmentprospect}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Failure Cases}{9}{subsection.4.4}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {5}Application of TilePilot: KTO Training}{9}{section.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.1}Post-hoc Reasoning Trace Generation}{9}{subsection.5.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.2}Preference Optimization}{9}{subsection.5.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {5.3}KTO Results}{10}{subsection.5.3}\protected@file@percent }
\@writefile{lot}{\contentsline {table}{\numberline {3}{\ignorespaces Comparison of the two runs before and after KTO training. Compiler errors includes actual compiler errors and malformed file generations.}}{10}{table.caption.12}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {6}Conclusion}{10}{section.6}\protected@file@percent }
\bibdata{sample}
\bibcite{ethayarajh2024ktomodelalignmentprospect}{{1}{2024}{{Ethayarajh et~al.}}{{Ethayarajh, Xu, Muennighoff, Jurafsky, and Kiela}}}
\bibcite{dspy2023}{{2}{2023}{{Khattab et~al.}}{{Khattab, Singhvi, Maheshwari, Zhang, Santhanam, Vardhamanan, Haq, Sharma, Joshi, Moazam, Miller, Zaharia, and Potts}}}
\bibcite{kernelsseum2024}{{3}{2024}{{Lab}}{{}}}
\bibcite{sakana2024}{{4}{2025}{{Lange et~al.}}{{Lange, Prasad, Sun, Faldor, Tang, and Ha}}}
\bibcite{ouyang2025kernelbenchllmswriteefficient}{{5}{2025}{{Ouyang et~al.}}{{Ouyang, Guo, Arora, Zhang, Hu, RÃ©, and Mirhoseini}}}
\bibcite{tilelang2025}{{6}{2025}{{Wang et~al.}}{{Wang, Cheng, Shi, Tang, Mo, Xie, Ma, Xia, Xue, Yang, and Yang}}}
\@writefile{toc}{\contentsline {section}{\numberline {7}Team Responsibilities}{11}{section.7}\protected@file@percent }
\gdef \@abspage@last{11}

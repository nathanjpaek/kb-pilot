import torch
from torch import Tensor
import torch.utils.data
import torch.utils.data.dataset
import torch
import torch.nn as nn
import torch.utils.data.distributed


class TVLoss(nn.Module):
    """Regularization loss based on Li FeiFei."""

    def __init__(self, weight: 'Tensor') ->None:
        """The weight information of loss is based on the image information generated by the generator.

        Args:
            weight (tensor): Fake high resolution image weight.
        """
        super(TVLoss, self).__init__()
        self.weight = weight

    def forward(self, input: 'Tensor') ->Tensor:
        batch_size = input.size()[0]
        h_x = input.size()[2]
        w_x = input.size()[3]
        count_h = self.tensor_size(input[:, :, 1:, :])
        count_w = self.tensor_size(input[:, :, :, 1:])
        h_tv = torch.pow(input[:, :, 1:, :] - input[:, :, :h_x - 1, :], 2).sum(
            )
        w_tv = torch.pow(input[:, :, :, 1:] - input[:, :, :, :w_x - 1], 2).sum(
            )
        return self.weight * 2 * (h_tv / count_h + w_tv / count_w) / batch_size

    @staticmethod
    def tensor_size(t):
        return t.size()[1] * t.size()[2] * t.size()[3]


def get_inputs():
    return [torch.rand([4, 4, 4, 4])]


def get_init_inputs():
    return [[], {'weight': 4}]

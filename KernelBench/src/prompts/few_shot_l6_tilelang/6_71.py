"""
Problem Name: 71_Conv3d_Tanh_Clamp_Divide_Sigmoid_Swish
Evaluation Result:
compiled=True correctness=True metadata={'hardware': 'NVIDIA H200', 'device': '0', 'correctness_trials': '(5 / 5)'} runtime=1.65 runtime_stats={'mean': 1.65, 'std': 0.034, 'min': 1.59, 'max': 1.73, 'num_trials': 100, 'performance_comparison': {'original_pytorch_stats': {'mean': 2.05, 'std': 0.0344, 'min': 1.99, 'max': 2.19, 'num_trials': 100}, 'speedup_ratio': 1.24}}
"""

import math
import torch
import torch.nn as nn

import tilelang
import tilelang.language as T


# ------------------------------------------------------------------------------
# TileLang kernel factory
# ------------------------------------------------------------------------------


def _build_conv3d_fused_kernel(
    N: int,
    C: int,
    D: int,
    H: int,
    W: int,
    F: int,
    KD: int,
    KH: int,
    KW: int,
    clamp_min: float,
    clamp_max: float,
    block_threads: int = 256,
    dtype: str = "float16",
    accum_dtype: str = "float32",
):
    OD = D - KD + 1
    OH = H - KH + 1
    OW = W - KW + 1
    numel = N * F * OD * OH * OW

    one_f32 = float(1.0)
    cmn = float(clamp_min)
    cmx = float(clamp_max)
    half_const = float(0.5)

    @tilelang.jit(out_idx=-1)
    @T.prim_func
    def conv3d_fused(
        X: T.Tensor((N, C, D, H, W), dtype),
        Wt: T.Tensor((F, C, KD, KH, KW), dtype),  # weight
        B: T.Tensor((F,), dtype),                 # bias
        Out: T.Tensor((N, F, OD, OH, OW), dtype),  # generated by TileLang
    ):
        grid_dim = T.ceildiv(numel, block_threads)

        with T.Kernel(grid_dim, threads=block_threads) as bx:
            tx = T.get_thread_binding(0)
            idx = bx * block_threads + tx
            if idx < numel:
                # ---------------------------------------------
                # Decompose linear index ➜ (n, f, od, oh, ow)
                # ---------------------------------------------
                ow = idx % OW
                idx //= OW
                oh = idx % OH
                idx //= OH
                od = idx % OD
                idx //= OD
                f = idx % F
                n = idx // F

                # ---------------------------------------------
                # Local accumulator
                # ---------------------------------------------
                acc = T.alloc_local((1,), accum_dtype)
                acc[0] = T.Cast(accum_dtype, 0)

                # ---------------------------------------------
                # Convolution inner loops
                # ---------------------------------------------
                for kd in T.serial(KD):
                    for kh in T.serial(KH):
                        for kw in T.serial(KW):
                            for c in T.serial(C):
                                val_in = X[
                                    n,
                                    c,
                                    od + kd,
                                    oh + kh,
                                    ow + kw,
                                ].astype(accum_dtype)
                                val_w = Wt[
                                    f,
                                    c,
                                    kd,
                                    kh,
                                    kw,
                                ].astype(accum_dtype)
                                acc[0] += val_in * val_w

                # ---------------------------------------------
                # Add bias
                # ---------------------------------------------
                acc[0] += B[f].astype(accum_dtype)

                # ---------------------------------------------
                # Fused post-ops:
                # tanh → clamp → /2 → sigmoid → swish variant
                # ---------------------------------------------
                v = T.tanh(acc[0])
                v = T.clamp(v, cmn, cmx)
                v = v * half_const  # divide by 2.0

                one_val = T.Cast(accum_dtype, one_f32)
                sig1 = one_val / (one_val + T.exp(-v))
                sig2 = one_val / (one_val + T.exp(-sig1))
                out_val = sig1 * sig2

                # ---------------------------------------------
                # Store result
                # ---------------------------------------------
                Out[n, f, od, oh, ow] = T.Cast(dtype, out_val)

    return conv3d_fused


# ------------------------------------------------------------------------------
# PyTorch wrapper module
# ------------------------------------------------------------------------------


class ModelNew(nn.Module):
    """
    TileLang-accelerated 3D conv + fused nonlinearities (tanh → clamp → /2 →
    sigmoid → sigmoid •).
    """

    def __init__(
        self,
        in_channels: int,
        out_channels: int,
        kernel_size,
        clamp_min: float,
        clamp_max: float,
    ):
        super().__init__()

        # ------------------------------------------------------------------
        # Parse kernel size
        # ------------------------------------------------------------------
        if isinstance(kernel_size, int):
            self.kd = self.kh = self.kw = int(kernel_size)
        else:
            self.kd, self.kh, self.kw = map(int, kernel_size)

        self.in_ch = int(in_channels)
        self.out_ch = int(out_channels)
        self.clamp_min = float(clamp_min)
        self.clamp_max = float(clamp_max)

        # ------------------------------------------------------------------
        # Parameters (match nn.Conv3d defaults)
        # ------------------------------------------------------------------
        self.weight = nn.Parameter(
            torch.empty(
                self.out_ch,
                self.in_ch,
                self.kd,
                self.kh,
                self.kw,
            )
        )
        nn.init.kaiming_uniform_(self.weight, a=math.sqrt(5))

        self.bias = nn.Parameter(torch.empty(self.out_ch))
        fan_in = self.in_ch * self.kd * self.kh * self.kw
        bound = 1 / math.sqrt(fan_in)
        nn.init.uniform_(self.bias, -bound, bound)

        # ------------------------------------------------------------------
        # Kernel cache  {key: compiled_kernel}
        # ------------------------------------------------------------------
        self._kernel_cache = {}

    # ----------------------------------------------------------------------
    # Kernel cache helper
    # ----------------------------------------------------------------------
    def _get_kernel(
        self,
        N: int,
        D: int,
        H: int,
        W: int,
        dtype: torch.dtype = torch.float16,
    ):
        key = (N, D, H, W, dtype)
        if key not in self._kernel_cache:
            tl_dtype = "float16" if dtype == torch.float16 else "float32"
            self._kernel_cache[key] = _build_conv3d_fused_kernel(
                N=N,
                C=self.in_ch,
                D=D,
                H=H,
                W=W,
                F=self.out_ch,
                KD=self.kd,
                KH=self.kh,
                KW=self.kw,
                clamp_min=self.clamp_min,
                clamp_max=self.clamp_max,
                dtype=tl_dtype,
                accum_dtype="float32",
            )
        return self._kernel_cache[key]

    # ----------------------------------------------------------------------
    # Forward
    # ----------------------------------------------------------------------
    def forward(self, x: torch.Tensor) -> torch.Tensor:
        """
        Args:
            x : (N, C_in, D, H, W)
        Returns:
            out : (N, C_out, D-KD+1, H-KH+1, W-KW+1)
        """
        orig_dtype = x.dtype
        x_f16 = x.to(device="cuda", dtype=torch.float16).contiguous()
        w_f16 = self.weight.to(device="cuda", dtype=torch.float16).contiguous()
        b_f16 = self.bias.to(device="cuda", dtype=torch.float16).contiguous()

        N, _, D, H, W = x_f16.shape
        kernel = self._get_kernel(N, D, H, W, x_f16.dtype)
        y_f16 = kernel(x_f16, w_f16, b_f16)

        return y_f16.to(orig_dtype)